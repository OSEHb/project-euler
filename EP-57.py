'''Задача 57'''
# Можно убедиться в том, что квадратный корень из двух можно выразить в виде бесконечно длинной дроби.
# √ 2 = 1 + 1/(2 + 1/(2 + 1/(2 + ... ))) = 1.414213...
# Приблизив это выражение для первых четырех итераций, получим:
# 1 + 1/2 = 3/2 = 1.5
# 1 + 1/(2 + 1/2) = 7/5 = 1.4
# 1 + 1/(2 + 1/(2 + 1/2)) = 17/12 = 1.41666...
# 1 + 1/(2 + 1/(2 + 1/(2 + 1/2))) = 41/29 = 1.41379...
# Следующие три приближения: 99/70, 239/169 и 577/408, а восьмое приближение, 1393/985, является первым случаем,
# в котором количество цифр в числителе превышает количество цифр в знаменателе.
# У скольких дробей длина числителя больше длины знаменателя в первой тысяче приближений выражения?

from fractions import Fraction  # модуль для работы с дробями

result_nums = 0  # Время работы 23с


def num_or_denom(arg):  # Определяем кол-во цифр в числителе и знаменателе, возвращаем 1 или 0
    num = ''  # числитель
    denom = ''  # знаменатель
    div = ''  # /
    nms = '0123456789'

    for n in str(arg):  # разделяю переданный аргумент на числитель и знаменатель
        if n in nms and div == '':
            num += n
        elif n in nms and div == '/':
            denom += n
        else:
            div = '/'

    if len(num) > len(denom):
        return 1
    else:
        return 0


a = ' + 1 / '
b = '2'
sq2 = '1'  # сюда записываем формулу в виде строки на каждое приближение отдельно

for i in range(1, 1001):
    if i > 1:
        sq2 = sq2[:1 - i]

    sq2 = sq2 + a + '(' + b
    sq2 += ')' * i  # добавляем скобки в конец формулы
    result = 0  # результат вычесления формулы
    value = ''  # значение + или /

    for val in sq2[::-1]:  # проходим формулу начиная с конца
        if val == '(' or val == ')' or val == ' ':
            continue
        if val == '2' and value == '':
            result += Fraction(2)
        elif val == '/':
            value = '/'
        elif val == '1' and value == '/':
            result = Fraction(1) / Fraction(result)
        elif val == '+':
            value = '+'
        elif val == '2' and value == '+':
            result = Fraction(2) + Fraction(result)
        elif val == '1' and value == '+':
            result = Fraction(1) + Fraction(result)

    result_nums += num_or_denom(result)  # передаю в функцию результат вычесления формулы

print(result_nums)






